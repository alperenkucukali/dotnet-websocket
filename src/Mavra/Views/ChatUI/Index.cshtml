<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Mavra Application</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>
    <div class="container-fluid container-md">
        <div class="row">
            <header class="d-flex flex-wrap justify-content-center py-3 mb-4 border-bottom">
                <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto link-body-emphasis text-decoration-none">
                    <svg class="bi me-2" width="40" height="32"><use xlink:href="#bootstrap"></use></svg>
                    <span class="fs-4">mavra</span>
                </a>
            </header>
        </div>

        <div class="row align-items-center g-lg-5 py-5">
            <div class="col-lg-7 text-center text-lg-start">
                <h1 class="display-4 fw-bold lh-1 text-body-emphasis mb-3">A sample of chat application with WebSocket</h1>
                <p class="col-lg-10 fs-4">Join the channel!</p>
            </div>
            <div class="col-md-10 mx-auto col-lg-5">
                <form class="p-4 p-md-5 border rounded-3 bg-body-tertiary">
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" required maxlength="32" id="username" placeholder="username">
                        <label for="username">Username</label>
                    </div>
                    <button class="w-100 btn btn-lg btn-primary" type="button" id="joinButton">Join!</button>
                    <hr class="my-4">
                    <small class="text-body-secondary">This application never store your data.</small>
                </form>
            </div>
        </div>
    </div>
    <div class="container border pt-3 rounded-3 bg-body-tertiary" id="chatContainer" hidden="hidden">
        <div class="row my-2" style="min-height:350px;max-height:350px;overflow:overlay;">
            <div class="col pb-3" id="chat-area"></div>
        </div>
        <div class="row">
            <div class="col">
                <div class="input-group mb-3">
                    <input type="text" class="form-control form-control-sm" placeholder="Message" aria-label="Message" aria-describedby="sendButton" id="sendMessage">
                    <button class="btn btn-sm btn-outline-primary" type="button" id="sendButton">Send</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        var joinButton = document.getElementById("joinButton");
        var username = document.getElementById("username");
        var sendMessage = document.getElementById("sendMessage");
        var sendButton = document.getElementById("sendButton");
        var stateLabel = document.getElementById("stateLabel");
        var chatArea = document.getElementById("chat-area");
        var chatContainer = document.getElementById("chatContainer");
        var socket;

        function updateState() {
            function disable() {
                sendMessage.disabled = true;
                sendButton.disabled = true;
            }
            function enable() {
                sendMessage.disabled = false;
                sendButton.disabled = false;
            }

            joinButton.disabled = true;

            if (!socket) {
                disable();
            }
            else {
                switch (socket.readyState) {
                    case WebSocket.CLOSED:
                        console.log("Disconnected!");
                        disable();
                        joinButton.disabled = false;
                        break;
                    case WebSocket.CLOSING:
                        console.log("Disconnecting...");
                        disable();
                        break;
                    case WebSocket.CONNECTING:
                        console.log("Connecting...");
                        disable();
                        break;
                    case WebSocket.OPEN:
                        console.log("Connected!");
                        enable();
                        break;
                    default:
                        disable();
                        break;
                }
            }
        }

        username.onchange = function () {
            username.classList.remove('is-invalid');
        };

        sendMessage.addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                sendButton.click();
            }
        });

        sendButton.onclick = function () {
            if (sendMessage.value.trim() == '') return;
            if (!socket || socket.readyState !== WebSocket.OPEN) {
                alert("socket not connected");
            }
            socket.send(sendMessage.value);
            chatArea.insertAdjacentHTML("beforeend", getOwnMessage(username.value, sendMessage.value));
            sendMessage.value = '';
        };

        joinButton.onclick = function () {
            joinButton.disabled = true;
            joinButton.innerHTML = 'Connecting...';
            if (username.value.trim() == '') {
                username.classList.add('is-invalid');
                joinButton.disabled = false;
                joinButton.innerHTML = 'Join!';
                return;
            }
            socket = new WebSocket("ws://" + window.location.host + "/chat/" + username.value);
            socket.onopen = function (event) {
                updateState();
                username.classList.add('is-valid');
                console.log("Connected!");
                joinButton.innerHTML = 'Connected!';
                chatContainer.hidden = false;
                chatArea.insertAdjacentHTML("beforeend", getSystemMessage(`Connected!`));
            };
            socket.onclose = function (event) {
                updateState();
                chatArea.insertAdjacentHTML("beforeend", getSystemMessage(`Server closed! Reason:${event.reason}`));
            };
            socket.onerror = updateState;
            socket.onmessage = function (event) {
                console.log(event.data);
                let msgData = JSON.parse(event.data);
                chatArea.insertAdjacentHTML("beforeend",
                    msgData.IsSystemMessage ? getSystemMessage(msgData.Message) : getMessage(msgData.Sender, msgData.Message));
            };
        };

        function getMessage(sender, message,) {
            return `
                    <div class="row my-2">
                        <div class="col text-start">
                            <h6>${sender}</h6>
                            <small class="bg-white d-inline-block flex-wrap m-0 p-1 rounded-1" style="max-width:70%;">${message}</small>
                        </div>
                    </div>
                `;
        }
        function getOwnMessage(sender, message,) {
            return `
                    <div class="row my-2">
                        <div class="col text-end">
                            <h6>${sender}</h6>
                            <small class="bg-white d-inline-block flex-wrap m-0 p-1 rounded-1" style="max-width:70%;">${message}</small>
                        </div>
                    </div>
                `;
        }

        function getSystemMessage(message) {
            return '<div class="row my-1"><div class="col text-center"><em class="small text-muted">' + message + '</em></div></div>';
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>